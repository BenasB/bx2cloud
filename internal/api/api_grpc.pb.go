// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VpcService_Get_FullMethodName    = "/bx2cloud.VpcService/Get"
	VpcService_List_FullMethodName   = "/bx2cloud.VpcService/List"
	VpcService_Create_FullMethodName = "/bx2cloud.VpcService/Create"
	VpcService_Delete_FullMethodName = "/bx2cloud.VpcService/Delete"
)

// VpcServiceClient is the client API for VpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VpcServiceClient interface {
	Get(ctx context.Context, in *VpcIdentificationRequest, opts ...grpc.CallOption) (*Vpc, error)
	List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Vpc], error)
	Create(ctx context.Context, in *VpcCreationRequest, opts ...grpc.CallOption) (*Vpc, error)
	Delete(ctx context.Context, in *VpcIdentificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type vpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVpcServiceClient(cc grpc.ClientConnInterface) VpcServiceClient {
	return &vpcServiceClient{cc}
}

func (c *vpcServiceClient) Get(ctx context.Context, in *VpcIdentificationRequest, opts ...grpc.CallOption) (*Vpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vpc)
	err := c.cc.Invoke(ctx, VpcService_Get_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) List(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Vpc], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &VpcService_ServiceDesc.Streams[0], VpcService_List_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, Vpc]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VpcService_ListClient = grpc.ServerStreamingClient[Vpc]

func (c *vpcServiceClient) Create(ctx context.Context, in *VpcCreationRequest, opts ...grpc.CallOption) (*Vpc, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Vpc)
	err := c.cc.Invoke(ctx, VpcService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcServiceClient) Delete(ctx context.Context, in *VpcIdentificationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VpcService_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpcServiceServer is the server API for VpcService service.
// All implementations must embed UnimplementedVpcServiceServer
// for forward compatibility.
type VpcServiceServer interface {
	Get(context.Context, *VpcIdentificationRequest) (*Vpc, error)
	List(*emptypb.Empty, grpc.ServerStreamingServer[Vpc]) error
	Create(context.Context, *VpcCreationRequest) (*Vpc, error)
	Delete(context.Context, *VpcIdentificationRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedVpcServiceServer()
}

// UnimplementedVpcServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVpcServiceServer struct{}

func (UnimplementedVpcServiceServer) Get(context.Context, *VpcIdentificationRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedVpcServiceServer) List(*emptypb.Empty, grpc.ServerStreamingServer[Vpc]) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedVpcServiceServer) Create(context.Context, *VpcCreationRequest) (*Vpc, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedVpcServiceServer) Delete(context.Context, *VpcIdentificationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedVpcServiceServer) mustEmbedUnimplementedVpcServiceServer() {}
func (UnimplementedVpcServiceServer) testEmbeddedByValue()                    {}

// UnsafeVpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VpcServiceServer will
// result in compilation errors.
type UnsafeVpcServiceServer interface {
	mustEmbedUnimplementedVpcServiceServer()
}

func RegisterVpcServiceServer(s grpc.ServiceRegistrar, srv VpcServiceServer) {
	// If the following call pancis, it indicates UnimplementedVpcServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VpcService_ServiceDesc, srv)
}

func _VpcService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).Get(ctx, req.(*VpcIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VpcServiceServer).List(m, &grpc.GenericServerStream[emptypb.Empty, Vpc]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type VpcService_ListServer = grpc.ServerStreamingServer[Vpc]

func _VpcService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcCreationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).Create(ctx, req.(*VpcCreationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VpcService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VpcIdentificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VpcService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcServiceServer).Delete(ctx, req.(*VpcIdentificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VpcService_ServiceDesc is the grpc.ServiceDesc for VpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bx2cloud.VpcService",
	HandlerType: (*VpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _VpcService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _VpcService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _VpcService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _VpcService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api.proto",
}
